const { supabaseAdmin, testConnection } = require('./src/config/database');
const logger = require('./src/utils/logger');

/**
 * Script para verificar se o banco de dados est√° configurado corretamente
 */

async function checkDatabaseConnection() {
  try {
    console.log('üîç Verificando conex√£o com o banco de dados...');
    
    const isConnected = await testConnection();
    if (!isConnected) {
      console.error('‚ùå Falha na conex√£o com o banco de dados');
      return false;
    }
    
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco:', error.message);
    return false;
  }
}

async function checkTables() {
  try {
    console.log('\nüìã Verificando tabelas...');
    
    const tables = [
      'contacts',
      'conversations', 
      'messages',
      'webhook_events',
      'agents'
    ];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabaseAdmin
          .from(table)
          .select('count')
          .limit(1);
        
        if (error) {
          console.error(`‚ùå Tabela ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela ${table}: OK`);
        }
      } catch (error) {
        console.error(`‚ùå Erro ao verificar tabela ${table}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar tabelas:', error.message);
  }
}

async function checkSampleData() {
  try {
    console.log('\nüìä Verificando dados de exemplo...');
    
    // Verificar contatos
    const { data: contacts, error: contactsError } = await supabaseAdmin
      .from('contacts')
      .select('count')
      .limit(1);
    
    if (contactsError) {
      console.error('‚ùå Erro ao verificar contatos:', contactsError.message);
    } else {
      console.log('‚úÖ Tabela de contatos acess√≠vel');
    }
    
    // Verificar conversas
    const { data: conversations, error: conversationsError } = await supabaseAdmin
      .from('conversations')
      .select('count')
      .limit(1);
    
    if (conversationsError) {
      console.error('‚ùå Erro ao verificar conversas:', conversationsError.message);
    } else {
      console.log('‚úÖ Tabela de conversas acess√≠vel');
    }
    
    // Verificar mensagens
    const { data: messages, error: messagesError } = await supabaseAdmin
      .from('messages')
      .select('count')
      .limit(1);
    
    if (messagesError) {
      console.error('‚ùå Erro ao verificar mensagens:', messagesError.message);
    } else {
      console.log('‚úÖ Tabela de mensagens acess√≠vel');
    }
    
    // Verificar eventos de webhook
    const { data: webhookEvents, error: webhookError } = await supabaseAdmin
      .from('webhook_events')
      .select('count')
      .limit(1);
    
    if (webhookError) {
      console.error('‚ùå Erro ao verificar eventos de webhook:', webhookError.message);
    } else {
      console.log('‚úÖ Tabela de eventos de webhook acess√≠vel');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar dados:', error.message);
  }
}

async function testInsert() {
  try {
    console.log('\nüß™ Testando inser√ß√£o de dados...');
    
    // Testar inser√ß√£o de contato
    const testContact = {
      phone: '+5511999999999',
      name: 'Teste Usu√°rio',
      email: 'teste@exemplo.com',
      status: 'active'
    };
    
    const { data: contact, error: contactError } = await supabaseAdmin
      .from('contacts')
      .insert(testContact)
      .select()
      .single();
    
    if (contactError) {
      console.error('‚ùå Erro ao inserir contato de teste:', contactError.message);
    } else {
      console.log('‚úÖ Contato de teste inserido:', contact.id);
      
      // Limpar contato de teste
      await supabaseAdmin
        .from('contacts')
        .delete()
        .eq('id', contact.id);
      
      console.log('üßπ Contato de teste removido');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste de inser√ß√£o:', error.message);
  }
}

async function checkEnvironment() {
  console.log('\nüîß Verificando vari√°veis de ambiente...');
  
  const requiredVars = [
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY', 
    'SUPABASE_SERVICE_ROLE_KEY'
  ];
  
  for (const varName of requiredVars) {
    if (process.env[varName]) {
      console.log(`‚úÖ ${varName}: Configurado`);
    } else {
      console.error(`‚ùå ${varName}: N√£o configurado`);
    }
  }
}

async function runDatabaseCheck() {
  console.log('üöÄ Iniciando verifica√ß√£o do banco de dados...\n');
  
  // Verificar vari√°veis de ambiente
  await checkEnvironment();
  
  // Verificar conex√£o
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    console.log('\n‚ùå N√£o foi poss√≠vel conectar ao banco de dados.');
    console.log('üí° Verifique suas vari√°veis de ambiente e a conex√£o com o Supabase.');
    return;
  }
  
  // Verificar tabelas
  await checkTables();
  
  // Verificar dados
  await checkSampleData();
  
  // Testar inser√ß√£o
  await testInsert();
  
  console.log('\n‚úÖ Verifica√ß√£o do banco de dados conclu√≠da!');
  console.log('\nüí° Se todos os testes passaram, o banco est√° configurado corretamente.');
  console.log('üí° Agora voc√™ pode testar o webhook com: node test-webhook.js');
}

// Executar verifica√ß√£o se o script for chamado diretamente
if (require.main === module) {
  runDatabaseCheck().catch(console.error);
}

module.exports = {
  checkDatabaseConnection,
  checkTables,
  checkSampleData,
  testInsert,
  checkEnvironment,
  runDatabaseCheck
};