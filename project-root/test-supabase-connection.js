#!/usr/bin/env node

/**
 * Script para testar a conex√£o com o Supabase
 * 
 * Uso:
 * node test-supabase-connection.js
 */

require('dotenv').config();

async function testSupabaseConnection() {
  console.log('üß™ ===== TESTE DE CONEX√ÉO COM SUPABASE =====\n');
  
  // 1. Verificar vari√°veis de ambiente
  console.log('1Ô∏è‚É£ Verificando vari√°veis de ambiente...');
  console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? '‚úÖ Presente' : '‚ùå Ausente');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Presente' : '‚ùå Ausente');
  
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå Vari√°veis do Supabase n√£o configuradas!');
    return;
  }
  
  // 2. Testar conex√£o
  console.log('\n2Ô∏è‚É£ Testando conex√£o com Supabase...');
  try {
    const { testConnection } = require('./src/config/database');
    const isConnected = await testConnection();
    
    if (isConnected) {
      console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
    } else {
      console.log('‚ùå Falha na conex√£o com Supabase');
      return;
    }
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o:', error.message);
    return;
  }
  
  // 3. Testar inser√ß√£o
  console.log('\n3Ô∏è‚É£ Testando inser√ß√£o de dados...');
  try {
    const { insertWithRetry } = require('./src/config/database');
    
    // Teste 1: Inserir webhook_event
    console.log('\nüìù Testando inser√ß√£o em webhook_events...');
    const webhookData = {
      event_id: 'test_' + Date.now(),
      event_type: 'Message',
      event_date: new Date().toISOString(),
      payload: { test: 'data' },
      processed: false,
      source_ip: '127.0.0.1',
      user_agent: 'test-script'
    };
    
    const webhookResult = await insertWithRetry('webhook_events', webhookData);
    console.log('‚úÖ webhook_events inserido com sucesso:', webhookResult.id);
    
    // Teste 2: Inserir contato
    console.log('\nüë§ Testando inser√ß√£o em contacts...');
    const contactData = {
      phone: '+5511999999999',
      name: 'Teste Supabase',
      email: 'teste@exemplo.com',
      status: 'active',
      tags: ['teste'],
      metadata: { source: 'test-script' }
    };
    
    const contactResult = await insertWithRetry('contacts', contactData);
    console.log('‚úÖ contacts inserido com sucesso:', contactResult.id);
    
    // Teste 3: Inserir conversa
    console.log('\nüí¨ Testando inser√ß√£o em conversations...');
    const conversationData = {
      contact_id: contactResult.id,
      umbler_chat_id: 'test_chat_' + Date.now(),
      status: 'open',
      is_open: true,
      is_private: false,
      is_waiting: false,
      total_unread: 0,
      metadata: { source: 'test-script' }
    };
    
    const conversationResult = await insertWithRetry('conversations', conversationData);
    console.log('‚úÖ conversations inserido com sucesso:', conversationResult.id);
    
    // Teste 4: Inserir mensagem
    console.log('\nüì® Testando inser√ß√£o em messages...');
    const messageData = {
      umbler_message_id: 'test_msg_' + Date.now(),
      chat_id: conversationResult.id,
      contact_id: contactResult.id,
      message_type: 'text',
      content: 'Mensagem de teste do Supabase',
      direction: 'inbound',
      source: 'Contact',
      message_state: 'received',
      is_private: false,
      event_at_utc: new Date().toISOString(),
      created_at_utc: new Date().toISOString(),
      metadata: { source: 'test-script' }
    };
    
    const messageResult = await insertWithRetry('messages', messageData);
    console.log('‚úÖ messages inserido com sucesso:', messageResult.id);
    
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Supabase est√° funcionando corretamente');
    console.log('‚úÖ Inser√ß√µes est√£o sendo salvas no banco');
    console.log('‚úÖ Backend pode usar o Supabase normalmente');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Executar teste
testSupabaseConnection().catch(console.error);