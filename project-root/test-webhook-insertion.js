require('dotenv').config();
const webhookService = require('./src/services/webhookService');
const logger = require('./src/utils/logger');

// Payload de exemplo da Umbler
const sampleWebhookPayload = {
  event: 'message.received',
  Payload: {
    Content: {
      Id: 'conv-123-456-789',
      Contact: {
        Id: 'contact-123',
        PhoneNumber: '+5511999887766',
        Name: 'Jo√£o Silva Teste',
        ProfilePictureUrl: 'https://example.com/profile.jpg',
        IsBlocked: false,
        ContactType: 'person',
        LastActiveUTC: '2024-01-15T10:30:00Z',
        Tags: [
          { Name: 'cliente' },
          { Name: 'vip' }
        ]
      },
      Channel: {
        Id: 'whatsapp-channel',
        Name: 'WhatsApp',
        Type: 'whatsapp'
      },
      LastMessage: {
        Id: 'msg-789-456-123',
        Content: 'Ol√°, preciso de ajuda!',
        Direction: 'Inbound',
        Type: 'text',
        Status: 'received',
        CreatedAtUTC: '2024-01-15T10:30:00Z',
        From: {
          PhoneNumber: '+5511999887766',
          Name: 'Jo√£o Silva Teste'
        },
        To: {
          PhoneNumber: '+5511888777666',
          Name: 'Empresa Teste'
        }
      }
    }
  }
};

async function testWebhookInsertion() {
  console.log('üß™ Testando inser√ß√£o de dados via webhook...\n');
  
  try {
    console.log('üì¶ Payload do webhook:');
    console.log(JSON.stringify(sampleWebhookPayload, null, 2));
    console.log('\nüîÑ Processando webhook...\n');
    
    // Processar o webhook
    const result = await webhookService.processWebhook(sampleWebhookPayload);
    
    console.log('‚úÖ Webhook processado com sucesso!');
    console.log('üìä Resultado:');
    console.log({
      eventType: result.eventType,
      contactId: result.contactId,
      conversationId: result.conversationId,
      messageId: result.messageId,
      processed: result.processed
    });
    
    // Verificar se os dados foram inseridos corretamente
    console.log('\nüîç Verificando dados inseridos...');
    
    if (result.contactId) {
      const contactService = require('./src/services/contactService');
      const contact = await contactService.findContactById(result.contactId);
      console.log('üë§ Contato criado/atualizado:', {
        id: contact.id,
        phone: contact.phone,
        name: contact.name,
        status: contact.status,
        tags: contact.tags
      });
    }
    
    if (result.conversationId) {
      const conversationService = require('./src/services/conversationService');
      const conversation = await conversationService.findConversationById(result.conversationId);
      console.log('üí¨ Conversa criada/atualizada:', {
        id: conversation.id,
        status: conversation.status,
        channel: conversation.channel,
        contactId: conversation.contact_id
      });
    }
    
    if (result.messageId) {
      const messageService = require('./src/services/messageService');
      const message = await messageService.findMessageById(result.messageId);
      console.log('üì® Mensagem criada:', {
        id: message.id,
        content: message.content,
        direction: message.direction,
        messageType: message.message_type,
        status: message.status
      });
    }
    
    console.log('\nüéâ Teste conclu√≠do com sucesso!');
    console.log('‚úÖ Os dados est√£o sendo inseridos corretamente no Supabase.');
    
  } catch (error) {
    console.log('\n‚ùå Erro durante o teste:', error.message);
    console.log('üìã Detalhes do erro:', error);
    
    // Diagn√≥stico de problemas comuns
    if (error.message.includes('Invalid API key')) {
      console.log('\nüí° Dica: Verifique as credenciais do Supabase no arquivo .env');
    }
    
    if (error.message.includes('relation') && error.message.includes('does not exist')) {
      console.log('\nüí° Dica: Execute o schema.sql no Supabase para criar as tabelas');
    }
    
    if (error.message.includes('fetch failed')) {
      console.log('\nüí° Dica: Verifique se a URL do Supabase est√° correta');
    }
    
    if (error.message.includes('violates')) {
      console.log('\nüí° Dica: Problema de valida√ß√£o de dados - verifique os campos obrigat√≥rios');
    }
  }
}

// Fun√ß√£o para testar apenas a conex√£o b√°sica
async function testBasicConnection() {
  console.log('üîó Testando conex√£o b√°sica...\n');
  
  try {
    const { testConnection } = require('./src/config/database');
    const isConnected = await testConnection();
    
    if (isConnected) {
      console.log('‚úÖ Conex√£o com Supabase OK');
      return true;
    } else {
      console.log('‚ùå Falha na conex√£o com Supabase');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro na conex√£o:', error.message);
    return false;
  }
}

// Executar testes
async function runTests() {
  console.log('üöÄ Iniciando testes de integra√ß√£o com Supabase\n');
  console.log('=' .repeat(50));
  
  // Teste 1: Conex√£o b√°sica
  console.log('\n1Ô∏è‚É£ TESTE DE CONEX√ÉO');
  const connectionOk = await testBasicConnection();
  
  if (!connectionOk) {
    console.log('\n‚ùå Teste abortado: N√£o foi poss√≠vel conectar com Supabase');
    console.log('\nüìã Verifique:');
    console.log('- As credenciais no arquivo .env est√£o corretas');
    console.log('- O projeto Supabase est√° ativo');
    console.log('- As tabelas foram criadas (execute schema.sql)');
    return;
  }
  
  // Teste 2: Inser√ß√£o via webhook
  console.log('\n2Ô∏è‚É£ TESTE DE INSER√á√ÉO VIA WEBHOOK');
  await testWebhookInsertion();
  
  console.log('\n' + '=' .repeat(50));
  console.log('üèÅ Testes conclu√≠dos!');
}

runTests();